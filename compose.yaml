# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/compose/compose-file/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      context: .
    ports:
      - '8000:8000'

    volumes:
      - /Users/a.gazzaev/Desktop/BIG-DATA/lab1/classification_model/experiments/exp_25177033897488245161:/classification
      - /Users/a.gazzaev/Desktop/BIG-DATA/lab1/classification_model/data:/dataset

    extra_hosts:
      - host.docker.internal:host-gateway

  db:
   image: redis/redis-stack:latest

  
   command: redis-server --requirepass ${PASS}  --protected-mode yes

   ports:
      - '6379:6379'



    # labels:
    #             project.git: "https://github.com/vendor/users.git"    # ссылка на репозиторий
    #                 # нужный бранч, по умолчанию - мастер
    #             project.build: make                 

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#    image: redis/redis-stack:latest
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

